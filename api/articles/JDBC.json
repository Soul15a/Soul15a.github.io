{"title":"JDBC","uid":"a00b2defe973fe8d6ab3038de496d7b1","slug":"JDBC","date":"2022-04-18T07:09:34.000Z","updated":"2022-04-18T07:40:46.164Z","comments":true,"path":"api/articles/JDBC.json","keywords":null,"cover":null,"content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h2 id=\"JDBC概述\"><a href=\"#JDBC概述\" class=\"headerlink\" title=\"JDBC概述\"></a>JDBC概述</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>JDBC 是使用Java语言操作关系型数据库的一套API</p>\n<p>Java DataBase Connectivity</p></blockquote>\n<h2 id=\"JDBC本质\"><a href=\"#JDBC本质\" class=\"headerlink\" title=\"JDBC本质\"></a>JDBC本质</h2><ul>\n<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>\n<li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li>\n<li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li>\n</ul>\n<h2 id=\"JDBC好处\"><a href=\"#JDBC好处\" class=\"headerlink\" title=\"JDBC好处\"></a>JDBC好处</h2><ul>\n<li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li>\n<li>可随时替换底层数据库，访问数据库的Java代码基本不变</li>\n</ul>\n<p>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包。</p>\n<h2 id=\"JDBC在java中的操作步骤\"><a href=\"#JDBC在java中的操作步骤\" class=\"headerlink\" title=\"JDBC在java中的操作步骤\"></a>JDBC在java中的操作步骤</h2><p>第一步：编写Java代码</p>\n<p>第二步：Java代码将SQL发送到MySQL服务端</p>\n<p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p>\n<p>第四步：将SQL语句执行的结果返回给Java代码</p>\n<h1 id=\"JDBC操作\"><a href=\"#JDBC操作\" class=\"headerlink\" title=\"JDBC操作\"></a>JDBC操作</h1><h2 id=\"1-导入jar包\"><a href=\"#1-导入jar包\" class=\"headerlink\" title=\"1.导入jar包\"></a>1.导入jar包</h2><p><a href=\"https://dev.mysql.com/downloads/connector/j/\">下载地址</a></p>\n<h2 id=\"2-注册驱动-高版本的jar包已经不需要这一步操作\"><a href=\"#2-注册驱动-高版本的jar包已经不需要这一步操作\" class=\"headerlink\" title=\"2.注册驱动(高版本的jar包已经不需要这一步操作)\"></a>2.注册驱动(高版本的jar包已经不需要这一步操作)</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></pre>\n\n<h2 id=\"3-获取连接\"><a href=\"#3-获取连接\" class=\"headerlink\" title=\"3.获取连接\"></a>3.获取连接</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">Connection conn &#x3D; DriverManager.getConnection(url, username, password);</code></pre>\n\n<h2 id=\"4-定义sql语句\"><a href=\"#4-定义sql语句\" class=\"headerlink\" title=\"4.定义sql语句\"></a>4.定义sql语句</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">String sql &#x3D; &quot;&quot;;</code></pre>\n\n<h2 id=\"5-获取SQL对象\"><a href=\"#5-获取SQL对象\" class=\"headerlink\" title=\"5.获取SQL对象\"></a>5.获取SQL对象</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">Statement stmt &#x3D; conn.createStatement();</code></pre>\n\n<h2 id=\"6-执行SQL\"><a href=\"#6-执行SQL\" class=\"headerlink\" title=\"6.执行SQL\"></a>6.执行SQL</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">stmt.executeUpdate(sql);</code></pre>\n\n<h1 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h1><p>Connection（数据库连接对象）作用：</p>\n<ul>\n<li>获取执行 SQL 的对象</li>\n<li>管理事务</li>\n</ul>\n<h2 id=\"connection管理事务\"><a href=\"#connection管理事务\" class=\"headerlink\" title=\"connection管理事务\"></a>connection管理事务</h2><p>下面代码的false代表不自动提交，即开启事务</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;开启事务&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n        conn.setAutoCommit(false);\n        &#x2F;&#x2F;5. 执行sql\n        int count1 &#x3D; stmt.executeUpdate(sql1);&#x2F;&#x2F;受影响的行数\n        &#x2F;&#x2F;6. 处理结果\n        System.out.println(count1);\n        int i &#x3D; 3&#x2F;0;\n        &#x2F;&#x2F;5. 执行sql\n        int count2 &#x3D; stmt.executeUpdate(sql2);&#x2F;&#x2F;受影响的行数\n        &#x2F;&#x2F;6. 处理结果\n        System.out.println(count2);\n\n        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;提交事务&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n        &#x2F;&#x2F;程序运行到此处，说明没有出现任何问题，则需求提交事务\n        conn.commit();\n    &#125; catch (Exception e) &#123;\n        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;回滚事务&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n        &#x2F;&#x2F;程序在出现异常时会执行到这个地方，此时就需要回滚事务\n        conn.rollback();\n        e.printStackTrace();\n    &#125;</code></pre>\n\n<h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><p>处理sql语句的查询以外的操作</p>\n<h1 id=\"ResultSet\"><a href=\"#ResultSet\" class=\"headerlink\" title=\"ResultSet\"></a>ResultSet</h1><p>ResultSet（结果集对象）作用：</p>\n<ul>\n<li>&#x3D;&#x3D;封装了SQL查询语句的结果。&#x3D;&#x3D;</li>\n</ul>\n<p>而执行了DQL语句后就会返回该对象，对应执行DQL语句的方法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ResultSet  executeQuery(sql)：执行DQL 语句，返回 ResultSet 对象</code></pre>\n\n<p>那么我们就需要从 <code>ResultSet</code> 对象中获取我们想要的数据。<code>ResultSet</code> 对象提供了操作查询结果数据的方法，如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>boolean  next()</p>\n<ul>\n<li>将光标从当前位置向前移动一行 </li>\n<li>判断当前行是否为有效行</li>\n</ul>\n<p>方法返回值说明：</p>\n<ul>\n<li>true  ： 有效航，当前行有数据</li>\n<li>false ： 无效行，当前行没有数据</li>\n</ul></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>xxx  getXxx(参数)：获取数据</p>\n<ul>\n<li>xxx : 数据类型；如： int getInt(参数) ；String getString(参数)</li>\n<li>参数<ul>\n<li>int类型的参数：列的编号，从1开始</li>\n<li>String类型的参数： 列的名称</li>\n</ul>\n</li>\n</ul></blockquote>\n<p>一开始光标指定于第一行前，如图所示红色箭头指向于表头行。当我们调用了 <code>next()</code> 方法后，光标就下移到第一行数据，并且方法返回true，此时就可以通过 <code>getInt(&quot;id&quot;)</code> 获取当前行id字段的值，也可以通过 <code>getString(&quot;name&quot;)</code> 获取当前行name字段的值。如果想获取下一行的数据，继续调用 <code>next()</code>  方法，以此类推。</p>\n<h1 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PreparedStatement作用：</p>\n<ul>\n<li>预编译SQL语句并执行：预防SQL注入问题</li>\n</ul></blockquote>\n<ul>\n<li><p>获取 PreparedStatement 对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; SQL语句中的参数值，使用？占位符替代\nString sql &#x3D; &quot;select * from user where username &#x3D; ? and password &#x3D; ?&quot;;\n&#x2F;&#x2F; 通过Connection对象获取，并传入对应的sql语句\nPreparedStatement pstmt &#x3D; conn.prepareStatement(sql);</code></pre>\n</li>\n<li><p>设置参数值</p>\n<p>上面的sql语句中参数使用 ? 进行占位，在之前之前肯定要设置这些 ?  的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PreparedStatement对象：setXxx(参数1，参数2)：给 ? 赋值</p>\n<ul>\n<li><p>Xxx：数据类型 ； 如 setInt (参数1，参数2)</p>\n</li>\n<li><p>参数：</p>\n<ul>\n<li><p>参数1： ？的位置编号，从1 开始</p>\n</li>\n<li><p>参数2： ？的值</p>\n</li>\n</ul>\n</li>\n</ul></blockquote>\n</li>\n<li><p>执行SQL语句</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>executeUpdate();  执行DDL语句和DML语句</p>\n<p>executeQuery();  执行DQL语句</p>\n<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>\n<ul>\n<li>调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了。</li>\n</ul></blockquote>\n<p>原理: 对预编译的一些字符进行转义处理</p>\n</li>\n</ul>\n<h1 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p>\n</li>\n<li><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p>\n</li>\n<li><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p>\n</li>\n<li><p>好处</p>\n<ul>\n<li>资源重用</li>\n<li>提升系统响应速度</li>\n<li>避免数据库连接遗漏</li>\n</ul>\n</li>\n</ul></blockquote>\n<p>之前我们代码中使用连接是没有使用都创建一个Connection对象，使用完毕就会将其销毁。这样重复创建销毁的过程是特别耗费计算机的性能的及消耗时间的。</p>\n<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用,连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p>\n<h2 id=\"数据库连接池实现\"><a href=\"#数据库连接池实现\" class=\"headerlink\" title=\"数据库连接池实现\"></a>数据库连接池实现</h2><ul>\n<li><p>标准接口：&#x3D;&#x3D;DataSource&#x3D;&#x3D;</p>\n<p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Connection getConnection()</code></pre>\n\n<p>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</p>\n</li>\n<li><p>常见的数据库连接池</p>\n<ul>\n<li>DBCP</li>\n<li>C3P0</li>\n<li>Druid</li>\n</ul>\n<p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p>\n</li>\n<li><p>Druid（德鲁伊）</p>\n<ul>\n<li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p>\n</li>\n<li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-Driud使用\"><a href=\"#4-3-Driud使用\" class=\"headerlink\" title=\"4.3  Driud使用\"></a>4.3  Driud使用</h3><p><a href=\"https://repo1.maven.org/maven2/com/alibaba/druid/\">下载地址</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>导入jar包 druid-1.1.12.jar</li>\n<li>定义配置文件</li>\n<li>加载配置文件</li>\n<li>获取数据库连接池对象</li>\n<li>获取连接</li>\n</ul></blockquote>\n<p>现在通过代码实现，首先需要先将druid的jar包放到项目下的lib下并添加为库文件</p>\n<p>编写配置文件如下：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">driverClassName&#x3D;com.mysql.jdbc.Driver\nurl&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;db1?useSSL&#x3D;false&amp;useServerPrepStmts&#x3D;true\nusername&#x3D;root\npassword&#x3D;1234\n# 初始化连接数量\ninitialSize&#x3D;5\n# 最大连接数\nmaxActive&#x3D;10\n# 最大等待时间\nmaxWait&#x3D;3000</code></pre>\n\n<p>使用druid的代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Druid数据库连接池演示\n *&#x2F;\npublic class DruidDemo &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n        &#x2F;&#x2F;1.导入jar包\n        &#x2F;&#x2F;2.定义配置文件\n        &#x2F;&#x2F;3. 加载配置文件\n        Properties prop &#x3D; new Properties();\n        prop.load(new FileInputStream(&quot;jdbc-demo&#x2F;src&#x2F;druid.properties&quot;));\n        &#x2F;&#x2F;4. 获取连接池对象\n        DataSource dataSource &#x3D; DruidDataSourceFactory.createDataSource(prop);\n\n        &#x2F;&#x2F;5. 获取数据库连接 Connection\n        Connection connection &#x3D; dataSource.getConnection();\n        System.out.println(connection); &#x2F;&#x2F;获取到了连接后就可以继续做其他操作了\n\n        &#x2F;&#x2F;System.out.println(System.getProperty(&quot;user.dir&quot;));\n    &#125;\n&#125;</code></pre>\n\n","text":"概念JDBC概述 JDBC 是使用Java语言操作关系型数据库的一套API Java DataBase Connectivity JDBC本质 官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口 各个数据库厂商去实现这套接口，提供数据库驱动jar包 我们可以使用这套接...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"sql","slug":"sql","count":1,"path":"api/tags/sql.json"},{"name":"jdbc","slug":"jdbc","count":2,"path":"api/tags/jdbc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDBC%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">JDBC概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDBC%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">JDBC本质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDBC%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">JDBC好处</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDBC%E5%9C%A8java%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">JDBC在java中的操作步骤</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JDBC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">JDBC操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AF%BC%E5%85%A5jar%E5%8C%85\"><span class=\"toc-text\">1.导入jar包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%B3%A8%E5%86%8C%E9%A9%B1%E5%8A%A8-%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84jar%E5%8C%85%E5%B7%B2%E7%BB%8F%E4%B8%8D%E9%9C%80%E8%A6%81%E8%BF%99%E4%B8%80%E6%AD%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.注册驱动(高版本的jar包已经不需要这一步操作)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.获取连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AE%9A%E4%B9%89sql%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.定义sql语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E8%8E%B7%E5%8F%96SQL%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5.获取SQL对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%89%A7%E8%A1%8CSQL\"><span class=\"toc-text\">6.执行SQL</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Connection\"><span class=\"toc-text\">Connection</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#connection%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">connection管理事务</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Statement\"><span class=\"toc-text\">Statement</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ResultSet\"><span class=\"toc-text\">ResultSet</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PreparedStatement\"><span class=\"toc-text\">PreparedStatement</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">数据库连接池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">数据库连接池实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-Driud%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4.3  Driud使用</span></a></li></ol></li></ol></li></ol>","author":{"name":"Soul_15a","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Soul15a","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"搜索与图论模板","uid":"d11324b19b05ce1c671aea0ac57ea0cf","slug":"搜索与图论模板","date":"2022-04-10T12:18:56.000Z","updated":"2022-04-10T13:28:16.382Z","comments":true,"path":"api/articles/搜索与图论模板.json","keywords":null,"cover":null,"text":"本篇文章旨在介绍搜索与图论模板。 在算法竞赛中，普通的指针建图方式过于慢了，所以采用数组的存储方式，最短路算法以及最小生成树算法很重要，spfa算法一般不用，因为spfa容易被卡，dijkstra算法用的比较多 包括：树与图的存储，拓扑排序，朴素dijkstra，堆优化版dijk...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"模板","slug":"模板","count":4,"path":"api/tags/模板.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"},{"name":"搜索","slug":"搜索","count":1,"path":"api/tags/搜索.json"},{"name":"图论","slug":"图论","count":1,"path":"api/tags/图论.json"},{"name":"dfs","slug":"dfs","count":1,"path":"api/tags/dfs.json"},{"name":"bfs","slug":"bfs","count":1,"path":"api/tags/bfs.json"}],"author":{"name":"Soul_15a","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Soul15a","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"mysql基础","uid":"ff3dfd0caecb8a3b5b7353d12c1be784","slug":"mysql基础","date":"2022-04-14T03:26:44.000Z","updated":"2022-04-14T03:53:40.086Z","comments":true,"path":"api/articles/mysql基础.json","keywords":null,"cover":[],"text":"引用—-黑马程序员javawebMySQL基础SQL 英文：Structured Query Language，简称 SQL，结构化查询语言 操作关系型数据库的编程语言 定义操作所有关系型数据库的统一标准，可以使用SQL操作所有的关系型数据库管理系统，以后工作中如果使用到了其他的...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"-mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"}],"author":{"name":"Soul_15a","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Soul15a","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}